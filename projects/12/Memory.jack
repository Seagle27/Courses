// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
	static int ram, heap, freeList;
	static Array heap;

    /** Initializes the class. */
    function void init() {
		let ram = 0;
		let heap = 2048;
		let freeList = 2048;
		let heap[0] = -1;  // Next
		let heap[1] = 14335;  // Length
		return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
		return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
		let ram[address] = value;
		return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
		var Array currentBlock, block;
	
		let currentBlock = freeList;
		while (currentBlock[1] < size){
			if (currentBlock[0] = -1) {
				do Sys.error(6);  // No available block.
				return null;
			}
			else {
				let currentBlock = currentBlock[0]; // advance
			}
		}

		let block = currentBlock + 2;
        if ( currentBlock[0] > (size + 2) ) { // Allocate only part of the block
            let block[size] = currentBlock[0] - size - 2;
            let block[size+1] = currentBlock[1];
            
            let currentBlock[1] = block + size;
        }
        let currentBlock[0] = 0;
        
		return block;
    }	

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
		let freeList = o - 2;
        let freeList[0] = freeList[1] - o;
        
        return;	
	}
}