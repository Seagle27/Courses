// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static int screenBaseAddress;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screenBaseAddress = 16384;
        let color = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var boolean tempColor;

        let tempColor = color;
        let color = false;
        do Screen.drawRectangle(0, 0, 511, 255);
        let color = tempColor;
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int pixelAddress, regValue;

        let pixelAddress = (32 * y) + (x / 16);
        let regValue = Memory.peek(screenBaseAddress + pixelAddress);
        let regValue = Screen.editBit(regValue, x & 15, color);
        do Memory.poke(screenBaseAddress + pixelAddress, regValue);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {  // 280,90 - 345,35
        var int a, b, dx, dy, diff;
        var int temp;
        var int addToX, addToY;

        let a = 0;
        let b = 0;
        let diff = 0;

        let dx = x2 - x1; 
        let dy = y2 - y1;
        
        let addToX = 1;
        let addToY = 1;

        if (dx < 0) {
            let addToX = -1;
        }
        if (dy < 0) {
            let addToY = -1;
        }

        while(~(a = dx) | (~(b = dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);

            if ((dx = 0) | (dy = 0)){
                if (dx=0) {
                    let b = b + addToY;  // Draw horizontal line
                }
                else {
                    let a = a + addToX; // Draw vertical line
                }
            }
            else {  // Draw diagonal line
                if (diff < 0) {
                    let a = a + addToX;
                    let diff = diff + (dy * addToY);
                }
                else {
                    let b = b + addToY;
                    let diff = diff - (dx * addToX);
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int currY;
        
        let currY = y1;

        while(~(currY > y2)) {
            do Screen.drawLine(x1, currY, x2, currY);
            let currY = currY + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, dx, currY;
        var int rSquared;

        if ((r > 181) | (~(r > 0))) {
            do Sys.error(23);
        }

        let rSquared = r * r;
        let dy = -r;

        while (~(dy > r)){
            let currY = y + dy;
            let dx = Math.sqrt(rSquared - (dy * dy));
            do Screen.drawLine(x - dx, currY, x + dx, currY);
            let dy = dy + 1;
        }
        return;

    }

    /**Edits the nth bit in registerVal to val. Returns the new register value*/
    function int editBit(int registerVal, int n, boolean val) {
        var int mask;
        if(val) {
            let mask = Math.twoToThePow(n);
            return (registerVal | mask);
        }
        else {
            let mask = Math.twoToThePow(15) - Math.twoToThePow(n);
            return (registerVal & mask);
        }
    }
}
