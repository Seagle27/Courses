// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static int powersOfTwo;

    /** Initializes the library. */
    function void init() {
		let powersOfTwo = Array.new(16);
		let powersOfTwo[0] = 1;
		let powersOfTwo[1] = 2;
		let powersOfTwo[2] = 4;
		let powersOfTwo[3] = 8;
		let powersOfTwo[4] = 16;
		let powersOfTwo[5] = 32;
		let powersOfTwo[6] = 64;
		let powersOfTwo[7] = 128;
		let powersOfTwo[8] = 256;
		let powersOfTwo[9] = 512;
		let powersOfTwo[10] = 1024;
		let powersOfTwo[11] = 2048;
		let powersOfTwo[12] = 4096;
		let powersOfTwo[13] = 8192;
		let powersOfTwo[14] = 16384;
		let powersOfTwo[15] = 16384 + 16384;
		return;
    }
	
	/** Returns the value of the n'th bit in x */
	function boolean bit(int x, int n) {
		return ~((x & powersOfTwo[n]) = 0);
	}

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
			let x = -x;
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int shiftedX, sum, i;
		
		let shiftedX = x;
		let sum = 0;
		let i = 0;
		
		while (i < 16) {  // 16 bit registers
			if (Math.bit(y, i)) {
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let i = i + 1;
		}
		return sum;
		
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int negX, negY, q, res;
		let negX = x < 0;
		let negY = y < 0;
		
		let x = Math.abs(x);
		let y = Math.abs(y);
		
		if ( y > x) {
			return 0;
		}
		let q = Math.divide(x, y + y);
		if ((x - (2 * q * y)) < y) {
			let res = q + q;
		}
		else {
			let res = q + q + 1;
		}
		
		if (negX = negY) {
			return res;
		}
		else {
			return -res;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int i, assumed, assumedPow, res;
		let i = 7;  // 16 bits / 2 - 1
		let res = 0;
		
		while( ~(i<0)) {  // while i >= 0
			let assumed = res + powersOfTwo[i];
			let assumedPow = assumed * assumed;
			if (~(assumedPow > x) & (assumedPow > 0)) {   // Prevent overflow
				let res = assumed;
			}
			let i = i - 1;
		}
		return res;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a > b) {
			return a;
		}
		else {
			return b;
		}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a < b) {
			return a;
		}
		else {
			return b;
		}
    }
}
